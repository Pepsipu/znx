#! /bin/sh

# Exit on errors.

set -e

# Modules to include in the GRUB2 boot image.

GRUB_MODULES="
boot
linux
normal
configfile
part_gpt
fat
ext2
btrfs
iso9660
udf
test
keystatus
loopback
regexp
probe
search
efi_gop
efi_uga
all_video
gfxterm
font
echo
read
help
ls
cat
halt
reboot
"

GRUB_MODULES=$(echo $GRUB_MODULES | tr '\n' ' ')


# A bunch of handy functions.

error () {
	echo "\e[31m$@\e[0m" 1>& 2
	exit 1
}

abort () {
	echo "$@"
	exit 0
}


HELP="
Usage: znx [no-confirm] command args

Available commands are:

- init DEVICE:
  Configures an initial setup on the disk. This should be
  done before attempting any other operation.

- install IMAGE_CODENAME [ URL | PATH ]:
  Installs a new ISO file to the /boot_images directory of
  the specified device. The device must have been
  initialized.
  Each image must me assigned a name. If no name
  is specified, the operation is aborted. Name it
  in a way that makes sense to you.

You can, optionally, pass the 'no-confirm' option (as the
first argument) to make znx accept every default option.
This is useful when calling from another script or when
not running interactively.
"

help () {
	echo "$HELP"
}

confirm () {
	if [ "$NOCONFIRM" == "SET" ]; then
		ANSWER=y
	else
		echo -n "$@ (y/n) "
		read -n 1 ANSWER
		echo
	fi

	if [ "$ANSWER" == "y" ]; then
		return 0
	else
		return 1
	fi
}


# == MAIN.

[ $# -lt 1 ] && error "No command given!"
[ $(id -u) -ne 0 ] && error "You are not the super user."

if [ $(pgrep znx | wc -l) -gt 1 ]; then
	error "znx is already running. Can't continue."
fi

if [ "$1" == "no-confirm" ]; then
	NOCONFIRM=SET
	QUIET=SET
	shift
fi

COMMAND=$1
shift

case $COMMAND in

	init)

		ZNX_DIR=/tmp/znx
		mkdir -p $ZNX_DIR

		[ $# -lt 1 ] && error "No device name given!"
		[ $# -gt 2 ] && error "Bad command: wrong number of arguments."
		[ ! -b $1 ] && error "Not a block device. Aborting."

		DEV=$(echo $1 | sed 's/[0-9]//g')

		if mount | grep -q $DEV; then
			error "Device is mounted! Unmount it before continuing."
		fi

		if ! confirm "ALL DATA ON $DEV WILL BE DESTROYED! CONTINUE?"; then
			abort "Operation aborted by user. Leaving unit $DEV untouched."
		fi

		dd if=/dev/zero bs=4096 count=16 of=$DEV
		sgdisk --zap-all $DEV || true
		sgdisk --new=1:0:64M --typecode 1:EF00 --change-name 1:ZNX_BOOT $DEV
		sgdisk --largest-new=2 --typecode 2:8300 --change-name 2:ZNX_DATA $DEV

		BOOT=$(findfs PARTLABEL=ZNX_BOOT)
		DATA=$(findfs PARTLABEL=ZNX_DATA)

		mkfs.vfat -F 32 -S 512 $BOOT
		mkfs.btrfs -qf $DATA

		if mount -t vfat $BOOT $ZNX_DIR; then
			trap "umount -f $ZNX_DIR" EXIT HUP INT TERM
		else
			error "Unable to mount $BOOT! Can't continue."
		fi

		mkdir -p $ZNX_DIR/efi/boot
		mkdir -p $ZNX_DIR/boot

		grub-mkimage -o $ZNX_DIR/efi/boot/bootx64.efi -O x86_64-efi -p /boot/grub $GRUB_MODULES

		cp -r grub $ZNX_DIR/boot

		umount -f $ZNX_DIR

		if mount $DATA $ZNX_DIR; then
			trap "umount -f $ZNX_DIR" EXIT HUP INT TERM
		else
			error "Unable to mount $DATA! Exiting now."
		fi

		mkdir -p $ZNX_DIR/boot_images
		mkdir -p $ZNX_DIR/apps
		mkdir -p $ZNX_DIR/data

		umount -f $ZNX_DIR

		echo "Operation successful. Device is ready."

	;;

	install)

		[ $# -ne 2 ] && error "Bad command: wrong number of arguments."

		NAME=$1
		TARGET=$2
		FILE=$(basename $TARGET)

		DATA=$(findfs PARTLABEL=ZNX_DATA)

		ZNX_DIR=/tmp/znx
		mkdir -p $ZNX_DIR

		if grep -q $DATA /proc/mounts; then
			if mount -o bind $(grep $DATA /proc/mounts | cut -d ' ' -f 2) $ZNX_DIR; then
				trap "umount -f $ZNX_DIR" EXIT HUP INT TERM
			fi
		else
			if mount $DATA $ZNX_DIR; then
				trap "umount -f $ZNX_DIR" EXIT HUP INT TERM
			fi
		fi

		INSTALL_DIR=$ZNX_DIR/boot_images/$NAME
		mkdir -p $INSTALL_DIR

		if [ -f $INSTALL_DIR/$FILE ]; then
			if ! confirm "File $FILE is already installed. Do you want to overwrite it?"; then
				abort "User aborted installation."
			fi
		fi

		if [ -f $TARGET ]; then
			cp $TARGET $INSTALL_DIR
		else
			cd $INSTALL_DIR
			zsync $TARGET
			cd -
		fi

		echo "Successfully installed $NAME."

	;;

	update)

		:

	;;

	list)

		:

	;;

	remove)

		:

	;;

	help)

		help

	;;

	*)

		error "No such command $COMMAND"

	;;
esac
