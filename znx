#! /bin/sh

COMMAND=$1
DEVICE=$2
IMAGE=$3
URL=$4
ZNX_DIR=/tmp/znx


# A bunch of handy functions.

error () {
	echo "znx: \e[31mError:\e[0m $@"
	exit 1
}

_clean () {
	cd /
	while mountpoint -q $ZNX_DIR; do
		umount -f $ZNX_DIR
	done
	rm -rf $ZNX_DIR
}

# Always clean $ZNX_DIR

trap _clean EXIT HUP INT TERM


_mount () {
	for dev in $DEVICE*; do

		blkid $dev | grep -q ZNX_DATA && {
			grep -q $DEVICE /proc/mounts && \
				mount -o bind $(grep $dev |cut -d ' ' -f 2) $ZNX_DIR || \
				mount $dev $ZNX_DIR || \
				error "Unable to mount $dev! Exiting now."
		}

	done

	mountpoint -q $ZNX_DIR || \
		error "Device isn't being managed by znx. You must initialize it first."

}


# Sanity checks.

[ $# -eq 0 ] && \
	error "No command given!"

[ $(id -u) -ne 0 ] && \
	error "You are not the super user."

[ ! -b $DEVICE ] && \
	error "$DEVICE is not a block device"

echo $DEVICE | grep -q '[0-9]' && \
	error "Please provide a block device name, not a partition."


# Prepare the temporary directory.

mkdir -p $ZNX_DIR


# Perform the right action.

case $COMMAND in

	init)

		[ $# -ne 2 ] && \
			error "Bad command: wrong number of arguments."

		grep -q $DEVICE /proc/mounts && \
			error "Device is mounted! Unmount it before continuing."

		echo "Wiping $DEVICE. Please wait."
		sgdisk -o $DEVICE
		sgdisk -n 1:0:32M -t 1:EF00 -c 1:ZNX_BOOT $DEVICE
		sgdisk -N 2 -t 2:8300 -c 2:ZNX_DATA $DEVICE

		for dev in $DEVICE*; do

			# Prepare the boot partition.

			blkid $dev | grep -q ZNX_BOOT && {
				mkfs.vfat $dev
				mount $dev $ZNX_DIR || \
					error "Unable to mount $dev! Can't continue."

				mkdir -p $ZNX_DIR/efi/boot
				mkdir -p $ZNX_DIR/boot

				grub-mkimage -C xz -O x86_64-efi -o $ZNX_DIR/efi/boot/bootx64.efi -p /boot/grub \
					boot linux search normal configfile \
					part_gpt btrfs fat iso9660 loopback \
					test keystatus gfxmenu regexp probe \
					efi_gop efi_uga all_video gfxterm font \
					echo read help ls cat png jpeg halt reboot

				cp -r grub $ZNX_DIR/boot
			}

			# Prepare the data partition.

			blkid $dev | grep -q ZNX_DATA && {
				mkfs.btrfs -qf $dev
				mount $dev $ZNX_DIR || \
					error "Unable to mount $DATA! Exiting now."

				mkdir -p $ZNX_DIR/boot_images
				mkdir -p $ZNX_DIR/apps
				mkdir -p $ZNX_DIR/data
			}

		done

		echo "Operation successful. Device is ready."

	;;

	install)

		[ $# -ne 4 ] && \
			error "Bad command: wrong number of arguments."

		echo $IMAGE | grep -qE '^[[:alnum:]_-]+/[[:alnum:]_-]+$' || \
			error "IMAGE must match the regular expression format: '^[[:alnum:]_-]+/[[:alnum:]_-]+$'."

		_mount
		mkdir -p $ZNX_DIR/boot_images/$IMAGE

		echo "Installing $IMAGE."
		cp -u $URL $ZNX_DIR/boot_images/$IMAGE || {
			cd $ZNX_DIR/boot_images/$IMAGE && \
				zsync -q $URL
			echo "Successfully installed \e[32m$IMAGE\e[0m." 
		} || {
			rm -rf $ZNX_DIR/boot_images/$IMAGE && \
				error "Failed to access $URL."
		}

	;;

	update)

		[ $# -eq 3 -o $# -eq 4 ] || \
			error "Bad command: wrong number of arguments."

		_mount
		cd $ZNX_DIR/boot_images/$IMAGE || \
			error "$IMAGE is not installed."

		echo "Updating $IMAGE."
		UPDATE_URL=$(echo $(dd if=*.iso bs=1 seek=33651 count=512 2 > /dev/null))

		cd $ZNX_DIR/boot_images/$IMAGE && {
			zsync -q ${UPDATE_URL:-$URL} && \
				echo "Successfully updated $IMAGE."
		} || {
			error "Failed to access $URL."
		}

	;;

	rollback)

		[ $# -ne 3 ] && \
			error "Bad command: wrong number of arguments."

		_mount
		cd $ZNX_DIR/boot_images/$IMAGE || \
			error "$IMAGE is not installed."

		echo "Performing rollback on $IMAGE."

		mv -f *.zs-old *.iso && \
			echo "Sucessfully performed rollback on $IMAGE." || \
			error "Couldn't rollback $IMAGE."

	;;

	clean)

		[ $# -ne 3 ] && \
			error "Bad command: wrong number of arguments."

		_mount
		cd $ZNX_DIR/boot_images/$IMAGE || \
			error "$IMAGE is not installed,"

		rm -rf *.zs-old && \
			echo "Sucessfully cleaned $IMAGE."

	;;

	remove)

		[ $# -ne 3 ] && \
			error "Wrong number of parameters passed."

		_mount
		cd $ZNX_DIR/boot_images/$IMAGE || \
			error "$IMAGE is not installed."

		rm -rf $ZNX_DIR/boot_images/$IMAGE && \
			echo "Successfully removed \e[32m$IMAGE\e[0m."

	;;

	list)

		_mount
		cd $ZNX_DIR/boot_images

		for d in ${IMAGE:-*/*}; do
			echo "\e[36m$d\e[0m"
		done

	;;

	*) error "No such command '$COMMAND'.";;
esac
